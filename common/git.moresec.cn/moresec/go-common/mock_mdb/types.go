// Code generated by MockGen. DO NOT EDIT.
// Source: mdb/types.go

// Package mock_mdb is a generated GoMock package.
package mock_mdb

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDBAdaptor is a mock of DBAdaptor interface
type MockDBAdaptor struct {
	ctrl     *gomock.Controller
	recorder *MockDBAdaptorMockRecorder
}

// MockDBAdaptorMockRecorder is the mock recorder for MockDBAdaptor
type MockDBAdaptorMockRecorder struct {
	mock *MockDBAdaptor
}

// NewMockDBAdaptor creates a new mock instance
func NewMockDBAdaptor(ctrl *gomock.Controller) *MockDBAdaptor {
	mock := &MockDBAdaptor{ctrl: ctrl}
	mock.recorder = &MockDBAdaptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBAdaptor) EXPECT() *MockDBAdaptorMockRecorder {
	return m.recorder
}

// Connect mocks base method
func (m *MockDBAdaptor) Connect(arg0 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Connect", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Connect indicates an expected call of Connect
func (mr *MockDBAdaptorMockRecorder) Connect(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockDBAdaptor)(nil).Connect), arg0)
}

// SetPoolLimit mocks base method
func (m *MockDBAdaptor) SetPoolLimit(limit int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPoolLimit", limit)
}

// SetPoolLimit indicates an expected call of SetPoolLimit
func (mr *MockDBAdaptorMockRecorder) SetPoolLimit(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPoolLimit", reflect.TypeOf((*MockDBAdaptor)(nil).SetPoolLimit), limit)
}

// Close mocks base method
func (m *MockDBAdaptor) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close
func (mr *MockDBAdaptorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBAdaptor)(nil).Close))
}

// GetOrg mocks base method
func (m *MockDBAdaptor) GetOrg() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrg")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetOrg indicates an expected call of GetOrg
func (mr *MockDBAdaptorMockRecorder) GetOrg() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrg", reflect.TypeOf((*MockDBAdaptor)(nil).GetOrg))
}

// FindOne mocks base method
func (m *MockDBAdaptor) FindOne(name string, query, result interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOne", name, query, result)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOne indicates an expected call of FindOne
func (mr *MockDBAdaptorMockRecorder) FindOne(name, query, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOne", reflect.TypeOf((*MockDBAdaptor)(nil).FindOne), name, query, result)
}

// Find mocks base method
func (m *MockDBAdaptor) Find(name string, query, result interface{}, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", name, query, result, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockDBAdaptorMockRecorder) Find(name, query, result, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDBAdaptor)(nil).Find), name, query, result, limit)
}

// FindAll mocks base method
func (m *MockDBAdaptor) FindAll(name string, query, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", name, query, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAll indicates an expected call of FindAll
func (mr *MockDBAdaptorMockRecorder) FindAll(name, query, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDBAdaptor)(nil).FindAll), name, query, result)
}

// FindAllWithSelect mocks base method
func (m *MockDBAdaptor) FindAllWithSelect(name string, query, selection, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllWithSelect", name, query, selection, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindAllWithSelect indicates an expected call of FindAllWithSelect
func (mr *MockDBAdaptorMockRecorder) FindAllWithSelect(name, query, selection, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllWithSelect", reflect.TypeOf((*MockDBAdaptor)(nil).FindAllWithSelect), name, query, selection, result)
}

// FindOneWithSelect mocks base method
func (m *MockDBAdaptor) FindOneWithSelect(name string, query, selection, result interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneWithSelect", name, query, selection, result)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneWithSelect indicates an expected call of FindOneWithSelect
func (mr *MockDBAdaptorMockRecorder) FindOneWithSelect(name, query, selection, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneWithSelect", reflect.TypeOf((*MockDBAdaptor)(nil).FindOneWithSelect), name, query, selection, result)
}

// RemoveAll mocks base method
func (m *MockDBAdaptor) RemoveAll(name string, query interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", name, query)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll
func (mr *MockDBAdaptorMockRecorder) RemoveAll(name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockDBAdaptor)(nil).RemoveAll), name, query)
}

// Insert mocks base method
func (m *MockDBAdaptor) Insert(name string, docs ...interface{}) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name}
	for _, a := range docs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Insert", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockDBAdaptorMockRecorder) Insert(name interface{}, docs ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name}, docs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockDBAdaptor)(nil).Insert), varargs...)
}

// Update mocks base method
func (m *MockDBAdaptor) Update(name string, query, update interface{}, multi bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", name, query, update, multi)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDBAdaptorMockRecorder) Update(name, query, update, multi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDBAdaptor)(nil).Update), name, query, update, multi)
}

// UpdateManual mocks base method
func (m *MockDBAdaptor) UpdateManual(name string, query, update interface{}, multi bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateManual", name, query, update, multi)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateManual indicates an expected call of UpdateManual
func (mr *MockDBAdaptorMockRecorder) UpdateManual(name, query, update, multi interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateManual", reflect.TypeOf((*MockDBAdaptor)(nil).UpdateManual), name, query, update, multi)
}

// FindWithSelect mocks base method
func (m *MockDBAdaptor) FindWithSelect(name string, query, selection, result interface{}, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithSelect", name, query, selection, result, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindWithSelect indicates an expected call of FindWithSelect
func (mr *MockDBAdaptorMockRecorder) FindWithSelect(name, query, selection, result, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithSelect", reflect.TypeOf((*MockDBAdaptor)(nil).FindWithSelect), name, query, selection, result, limit)
}

// FindCount mocks base method
func (m *MockDBAdaptor) FindCount(name string, query interface{}) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCount", name, query)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCount indicates an expected call of FindCount
func (mr *MockDBAdaptorMockRecorder) FindCount(name, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCount", reflect.TypeOf((*MockDBAdaptor)(nil).FindCount), name, query)
}

// FindSort mocks base method
func (m *MockDBAdaptor) FindSort(name string, query interface{}, sorter string, result interface{}, limit int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindSort", name, query, sorter, result, limit)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindSort indicates an expected call of FindSort
func (mr *MockDBAdaptorMockRecorder) FindSort(name, query, sorter, result, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSort", reflect.TypeOf((*MockDBAdaptor)(nil).FindSort), name, query, sorter, result, limit)
}

// FindWithAggregation mocks base method
func (m *MockDBAdaptor) FindWithAggregation(name string, pipeline, result interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindWithAggregation", name, pipeline, result)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindWithAggregation indicates an expected call of FindWithAggregation
func (mr *MockDBAdaptorMockRecorder) FindWithAggregation(name, pipeline, result interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindWithAggregation", reflect.TypeOf((*MockDBAdaptor)(nil).FindWithAggregation), name, pipeline, result)
}

// FindByLimitAndSkip mocks base method
func (m *MockDBAdaptor) FindByLimitAndSkip(name string, query, result interface{}, limit, skip int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLimitAndSkip", name, query, result, limit, skip)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByLimitAndSkip indicates an expected call of FindByLimitAndSkip
func (mr *MockDBAdaptorMockRecorder) FindByLimitAndSkip(name, query, result, limit, skip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLimitAndSkip", reflect.TypeOf((*MockDBAdaptor)(nil).FindByLimitAndSkip), name, query, result, limit, skip)
}

// FindSortByLimitAndSkip mocks base method
func (m *MockDBAdaptor) FindSortByLimitAndSkip(name string, query, result interface{}, limit, skip int, sorter ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{name, query, result, limit, skip}
	for _, a := range sorter {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FindSortByLimitAndSkip", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindSortByLimitAndSkip indicates an expected call of FindSortByLimitAndSkip
func (mr *MockDBAdaptorMockRecorder) FindSortByLimitAndSkip(name, query, result, limit, skip interface{}, sorter ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{name, query, result, limit, skip}, sorter...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindSortByLimitAndSkip", reflect.TypeOf((*MockDBAdaptor)(nil).FindSortByLimitAndSkip), varargs...)
}
