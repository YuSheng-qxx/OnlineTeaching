package mbase

// 加解密,md5码

import (
	"crypto/md5"
	"encoding/hex"
)

// md5String 生成MD5前缀,截断 length 长度.
func MD5String(key string, length int) string {
	h := md5.New()
	h.Write([]byte(key))
	result := hex.EncodeToString(h.Sum(nil))
	if length > len(result) {
		length = len(result)
	}
	return result[:length]
}

// 字符映射表
var sendByteMap = [256]byte{
	0x6f, 0x63, 0x01, 0xfc, 0xd5, 0x25, 0xf4, 0x82, 0xbc, 0x09, 0xc4, 0x1a, 0x11, 0xfb, 0x3d, 0x7e,
	0x05, 0x4f, 0xa3, 0x27, 0x2d, 0xbe, 0x70, 0x64, 0x17, 0xaa, 0x46, 0xdf, 0x94, 0x65, 0xc0, 0x8f,
	0x6a, 0xff, 0x24, 0xd9, 0x04, 0xb3, 0xf3, 0x0b, 0x9c, 0x35, 0xb4, 0x8a, 0x61, 0xc2, 0xd8, 0xe5,
	0x13, 0x31, 0x91, 0x6c, 0x71, 0x41, 0x2f, 0xe7, 0xf1, 0xe8, 0xfa, 0xb6, 0x51, 0xd7, 0x72, 0xdd,
	0xf7, 0xab, 0x60, 0x50, 0x96, 0x8e, 0x6d, 0x6e, 0xde, 0x0e, 0x18, 0x1b, 0x67, 0x43, 0xae, 0x1f,
	0x3e, 0xfd, 0xa8, 0x21, 0x42, 0xd3, 0x15, 0x36, 0xf0, 0xee, 0x84, 0xea, 0x3b, 0xd2, 0x8d, 0xeb,
	0xdc, 0x55, 0xb0, 0x3a, 0x58, 0x88, 0x3f, 0x5d, 0x73, 0xa6, 0xbf, 0x16, 0x90, 0xc6, 0xf5, 0x9e,
	0xac, 0x81, 0x07, 0xd6, 0x49, 0x69, 0x87, 0xe4, 0x38, 0xa4, 0x26, 0xa9, 0x75, 0x4d, 0xa1, 0xcf,
	0x14, 0x12, 0x57, 0x9a, 0xfe, 0xed, 0x1d, 0x53, 0x66, 0x78, 0x23, 0xad, 0x5b, 0x1e, 0x10, 0x97,
	0x7d, 0x92, 0x7c, 0x0c, 0xd1, 0xe2, 0x4c, 0xb2, 0x9f, 0x00, 0x80, 0xa7, 0x39, 0xb9, 0x30, 0xc3,
	0x22, 0xca, 0x08, 0xa2, 0x0d, 0xce, 0x9b, 0x89, 0x83, 0x28, 0x7b, 0xf6, 0x40, 0xf2, 0x74, 0xf9,
	0xe9, 0xdb, 0xb7, 0xf8, 0x59, 0xc8, 0xb5, 0x85, 0x2c, 0xec, 0xc9, 0xd0, 0x77, 0x4e, 0x9d, 0x47,
	0x45, 0xba, 0x34, 0xd4, 0x95, 0x37, 0xa0, 0xda, 0x1c, 0x7f, 0x44, 0xe1, 0xbd, 0x4b, 0x5e, 0x86,
	0xc5, 0x06, 0x62, 0x2a, 0xaf, 0x29, 0x02, 0x68, 0xb1, 0x98, 0x2e, 0x33, 0xe6, 0x4a, 0xe3, 0x8b,
	0xcb, 0x99, 0x8c, 0x0a, 0x7a, 0x76, 0x5c, 0x5f, 0x48, 0x56, 0xc1, 0x32, 0x03, 0x0f, 0xcd, 0xbb,
	0xc7, 0xa5, 0x3c, 0x93, 0xb8, 0x6b, 0xef, 0x19, 0x79, 0x54, 0x52, 0x5a, 0x2b, 0xcc, 0x20, 0xe0,
}

var recvByteMap = [256]byte{
	0x99, 0x02, 0xd6, 0xec, 0x24, 0x10, 0xd1, 0x72, 0xa2, 0x09, 0xe3, 0x27, 0x93, 0xa4, 0x49, 0xed,
	0x8e, 0x0c, 0x81, 0x30, 0x80, 0x56, 0x6b, 0x18, 0x4a, 0xf7, 0x0b, 0x4b, 0xc8, 0x86, 0x8d, 0x4f,
	0xfe, 0x53, 0xa0, 0x8a, 0x22, 0x05, 0x7a, 0x13, 0xa9, 0xd5, 0xd3, 0xfc, 0xb8, 0x14, 0xda, 0x36,
	0x9e, 0x31, 0xeb, 0xdb, 0xc2, 0x29, 0x57, 0xc5, 0x78, 0x9c, 0x63, 0x5c, 0xf2, 0x0e, 0x50, 0x66,
	0xac, 0x35, 0x54, 0x4d, 0xca, 0xc0, 0x1a, 0xbf, 0xe8, 0x74, 0xdd, 0xcd, 0x96, 0x7d, 0xbd, 0x11,
	0x43, 0x3c, 0xfa, 0x87, 0xf9, 0x61, 0xe9, 0x82, 0x64, 0xb4, 0xfb, 0x8c, 0xe6, 0x67, 0xce, 0xe7,
	0x42, 0x2c, 0xd2, 0x01, 0x17, 0x1d, 0x88, 0x4c, 0xd7, 0x75, 0x20, 0xf5, 0x33, 0x46, 0x47, 0x00,
	0x16, 0x34, 0x3e, 0x68, 0xae, 0x7c, 0xe5, 0xbc, 0x89, 0xf8, 0xe4, 0xaa, 0x92, 0x90, 0x0f, 0xc9,
	0x9a, 0x71, 0x07, 0xa8, 0x5a, 0xb7, 0xcf, 0x76, 0x65, 0xa7, 0x2b, 0xdf, 0xe2, 0x5e, 0x45, 0x1f,
	0x6c, 0x32, 0x91, 0xf3, 0x1c, 0xc4, 0x44, 0x8f, 0xd9, 0xe1, 0x83, 0xa6, 0x28, 0xbe, 0x6f, 0x98,
	0xc6, 0x7e, 0xa3, 0x12, 0x79, 0xf1, 0x69, 0x9b, 0x52, 0x7b, 0x19, 0x41, 0x70, 0x8b, 0x4e, 0xd4,
	0x62, 0xd8, 0x97, 0x25, 0x2a, 0xb6, 0x3b, 0xb2, 0xf4, 0x9d, 0xc1, 0xef, 0x08, 0xcc, 0x15, 0x6a,
	0x1e, 0xea, 0x2d, 0x9f, 0x0a, 0xd0, 0x6d, 0xf0, 0xb5, 0xba, 0xa1, 0xe0, 0xfd, 0xee, 0xa5, 0x7f,
	0xbb, 0x94, 0x5d, 0x55, 0xc3, 0x04, 0x73, 0x3d, 0x2e, 0x23, 0xc7, 0xb1, 0x60, 0x3f, 0x48, 0x1b,
	0xff, 0xcb, 0x95, 0xde, 0x77, 0x2f, 0xdc, 0x37, 0x39, 0xb0, 0x5b, 0x5f, 0xb9, 0x85, 0x59, 0xf6,
	0x58, 0x38, 0xad, 0x26, 0x06, 0x6e, 0xab, 0x40, 0xb3, 0xaf, 0x3a, 0x0d, 0x03, 0x51, 0x84, 0x21,
}

// 加密过程.
func EncryptEncoder(datas []byte) uint16 {
	orgLen := len(datas)
	for i := 0; i < len(datas); i++ {
		if int8(datas[i]) < 0 {
			datas[i] = mapRecvByte(byte(256 + int(datas[i])))
		} else {
			datas[i] = mapRecvByte(datas[i])
		}
	}
	return uint16(orgLen)
}

// 解密过程
func EncryptDecoder(datas []byte) uint16 {
	orgLen := len(datas)
	for i := 0; i < len(datas); i++ {
		if datas[i] < 0 {
			datas[i] = mapSendByte(byte(256 + int(datas[i])))
		} else {
			datas[i] = mapSendByte(datas[i])
		}
	}
	return uint16(orgLen)
}

// 字符映射
func mapSendByte(data byte) byte {
	byteNew := sendByteMap[data]
	return byteNew
}

func mapRecvByte(data byte) byte {
	byteNew := recvByteMap[data]
	return byteNew
}
